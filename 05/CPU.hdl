// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Mux1 select A(ddress) instruction or C(ompute instruction)
    // C instruction needs A instruction result, so aluout is selected
    Mux16(a = instruction, b = aluout, sel = instruction[15], out = mux1out);

    // A Register
    Not(in = instruction[15], out = notinst15);
    Or(a = notinst15, b = instruction[5], out = loadAreg);
    ARegister(in = mux1out, load = loadAreg, out = Aregout, out[0..14] = addressM);

    // Mux2 select ALU-y input from A Register or Memory
    Mux16(a = Aregout, b = inM, sel = instruction[12], out = mux2out);

    // ALU
    ALU(x = Dregout,
        y = mux2out,
        zx = instruction[11],
        nx = instruction[10],
        zy = instruction[9],
        ny = instruction[8],
        f  = instruction[7],
        no = instruction[6],
        out = aluout, out = outM, zr = aluoutis0, ng = aluoutisrh0);
    
    // D Register
    And(a = instruction[4], b = instruction[15], out = loadDreg);
    DRegister(in = aluout, load = loadDreg, out = Dregout);

    // PC
    Or(a = aluoutis0, b = aluoutisrh0, out = or1);
    Not(in = or1, out = aluoutisgh0); // is aluout positive?
    And(a = aluoutisgh0, b = instruction[0], out = positive);
    And(a = aluoutis0, b = instruction[1], out = equalzero);
    And(a = aluoutisrh0, b = instruction[2], out = negative);
    Or(a = equalzero, b = negative, out = zrorng);
    Or(a = zrorng, b = positive, out = zrorngorps);
    And(a = instruction[15], b = zrorngorps, out = loadPC);
    PC(in = Aregout, load = loadPC, inc = true, reset = reset, out[0..14] = pc);

    // writeM
    And(a = instruction[15], b = instruction[3], out = writeM);
}